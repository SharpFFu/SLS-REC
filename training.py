# -*- coding: utf-8 -*-
"""training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xp0kvmo3x_WuLTuF-bAisSkWBSQGAOmV
"""



modelx = HyperConv(coo_matrix_training)
modelx.train()
np_distPF = modelx.forward()
np_distPF = np_distPF.detach().numpy()

import pandas as pd
train_data = open(train_file, 'r').readlines()
sparse_training_matrix = sparse.dok_matrix((num_users, num_pois))
nana = float('nan')
for eachline in train_data:
    uid, pid, freq = eachline.strip().split()
    uids, pids, freqs = int(uid), int(pid), int(freq)
      items = np_distPF[uids]
      if pd.isnull(np_distPF[uids, pids]):
        sparse_training_matrix[uids, pids] = 0
      else:
        sparse_training_matrix[uids, pids] = math.ceil(np_distPF[uids, pids])

GMM = GeographyMultiCenterModel()
GM = GeographicalModule(alpha=0.9)
user_centers = GMM.multi_center_discover(sparse_training_matrixD, poi_coos)

GMM_h = GeographyMultiCenterModel()
user_centers_h = GMM_h.multi_center_discover(sparse_training_matrix, poi_coos)

print("Start Training FGCRec....")
start_time = time.time()
GM = GeographicalModule(alpha=0.9)
user_poi_matrix = user_poi_matrix[:870,:]
GM.UserModel(user_poi_matrix, poi_coos, user_centers)
GM.POIModel(user_poi_matrix, poi_coos)
GM.save_result('/content/sample_data/nomral/')
GM.load_result('/content/sample_data/nomral/')

print("Start Training FGCRec....")
start_time = time.time()
GMM = GeographyMultiCenterModel()
GMM_h = GeographicalModule(alpha=0.9)
user_centers = GMM.multi_center_discover(sparse_training_matrix, poi_coos)
user_poi_matrix = user_poi_matrix[:737,:]
GMM_h.UserModel(user_poi_matrix, poi_coos, user_centers_h)
GMM_h.POIModel(user_poi_matrix, poi_coos)
GMM_h.save_result('/content/sample_data/hg/')
GMM_h.load_result('/content/sample_data/hg/')

CM = CheckinModule(num_factors=10, reg_lambda=0.6, gamma_lmf=1.0, iters=30)
CM.train(user_poi_weighted_matrix)
GM.save_result('/content/sample_data/')
GM.load_result('/content/sample_data/')
elapsed_time = time.time() - start_time
print("Training Done. Elapsed time:", elapsed_time, "s")